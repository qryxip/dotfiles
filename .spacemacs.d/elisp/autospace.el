(require 'evil)
(require 'company)
(require 'cl)

(defconst as--lowercase-alphabets (string-to-list "abcdefghijklmnopqrstuvwxyz"))
(defconst as--uppercase-alphabets (string-to-list "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(defconst as--numbers (string-to-list "0123456789"))

(defvar autospace-mode-map (make-sparse-keymap))
(defvar autospace/inserted-any-char? nil)

(define-minor-mode autospace-mode
  :init-value nil
  :keymap autospace-mode-map
  (as--init))

(defun as--init ()
  nil)

(defun as--post-self-insert-hook-handler ()
  (with-demoted-errors "as--post-self-insert-hook-handler: %S"
    (when (autospace-mode)
      )))

(defun autospace--self-insert-spacing-when-after (l)
  (let ((p (point)))
    (when (and (member (preceding-char) l)
               (not (nth 3 (syntax-ppss p)))
               (not (equal p (line-beginning-position))))
      (insert-char 32))
    (self-insert-command 1)))

(defun autospace--self-insert-spacing-when-not-after (l)
  (let ((p (point)))
    (when (not (or (member (preceding-char) l) (nth 3 (syntax-ppss p)) (equal p (line-beginning-position))))
      (insert-char 32))
    (self-insert-command 1)))

(defun autospace--self-insert-spacing (x)
  (let ((p (point)))
    (when (and x (not (nth 3 (syntax-ppss p))) (not (equal p (line-beginning-position))))
      (insert-char 32))
    (self-insert-command 1)))

(defun autospace--insert-comma ()
  (interactive)
  (self-insert-command 1)
  (when (not (nth 3 (syntax-ppss (point))))
    (insert-char 32)))

(defun my-elisp/self-insert-spacing-when-after (l)
  (let ((p (point)))
    (when (and (member (preceding-char) l) (not (nth 3 (syntax-ppss p))) (not (equal p (line-beginning-position))))
      (insert-char 32))
    (self-insert-command 1)))

(defun my-elisp/self-insert-spacing-when-not-after (l)
  (let ((p (point)))
    (when (not (or (member (preceding-char) l) (nth 3 (syntax-ppss p)) (equal p (line-beginning-position))))
      (insert-char 32))
    (self-insert-command 1)))

(defun autospace-elisp/insert-character ()
  (interactive)
  (my-elisp/self-insert-spacing-when-after '(34 41 93)))

(defun autospace-elisp/insert-pair ()
  (interactive)
  (my-elisp/self-insert-spacing-when-not-after '(32 39 40 91)))

(defun autospace-elisp/insert-colon ()
  (interactive)
  (my-elisp/self-insert-spacing-when-not-after '(32 35)))

(setq company-begin-commands (cons 'autospace-elisp/insert-character company-begin-commands))
(setq company-begin-commands (cons 'autospace-elisp/insert-colon company-begin-commands))

(evil-define-key 'insert emacs-lisp-mode-map "a" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "b" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "c" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "d" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "e" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "f" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "g" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "h" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "i" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "j" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "k" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "l" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "m" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "n" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "o" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "p" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "q" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "r" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "s" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "t" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "u" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "v" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "w" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "x" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "y" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "z" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "A" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "B" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "C" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "D" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "E" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "F" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "G" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "H" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "I" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "J" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "K" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "L" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "M" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "N" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "O" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "P" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "Q" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "R" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "S" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "T" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "U" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "V" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "W" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "X" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "Y" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "Z" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "0" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "1" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "2" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "3" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "4" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "5" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "6" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "7" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "8" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "9" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "!" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "?" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "+" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "-" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "*" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "/" 'autospace-elisp/insert-character)

(evil-define-key 'insert emacs-lisp-mode-map "'" 'autospace-elisp/insert-colon)
(evil-define-key 'insert emacs-lisp-mode-map "#" 'autospace-elisp/insert-character)
(evil-define-key 'insert emacs-lisp-mode-map "(" 'autospace-elisp/insert-pair)
(evil-define-key 'insert emacs-lisp-mode-map "[" 'autospace-elisp/insert-pair)
(evil-define-key 'insert emacs-lisp-mode-map "\"" 'autospace-elisp/insert-pair)
