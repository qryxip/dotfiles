#!/usr/bin/env python3
# coding: utf-8

import os
import subprocess
import sys
import urllib.parse
import warnings

import click
import dotenv
import regex
import requests
from bs4 import BeautifulSoup

USER_AGENT = 'wi2-300-login.py'
ENVCHAIN_GROUP = 'wi2-300'
ENVVAR_NAME_USERNAME = 'WI2_300_USERNAME'
ENVVAR_NAME_PASSWORD = 'WI2_300_PASSWORD'


@click.command(help=f'Logs in to service.wi2.ne.jp.')
def main():
    username, password = username_and_password()
    response = http_get_printing('https://service.wi2.ne.jp/wi2net/Login/2/',
                                 [200, 302])
    if response.status_code == 302:
        exit_with_message('You have already logged in.')
    post_key = extract_post_key(response.text)
    response = http_post_urlencoded_printing(
        'https://service.wi2.ne.jp/wi2net/Login/1/?Wi2=1',
        {'postKey': post_key, 'id': username, 'pass': password}, [302])
    location = response.headers.get('Location')
    if location:
        if regex.match(r'\A/wi2net/Top/2/?(\?SSID=[0-9a-f]+)?/?\Z', location):
            return print('Successfully logged in.')
    exit_with_message('Failed to login. Are username and password correct?')


def username_and_password():
    dotenv_path = dotenv.find_dotenv()
    if dotenv_path:
        dotenv.load_dotenv(dotenv_path)
    username = os.environ.get(ENVVAR_NAME_USERNAME) or subprocess.check_output(
        ['envchain', ENVCHAIN_GROUP, 'sh', '-c',
         f'printf %s ${ENVVAR_NAME_USERNAME}']).decode()
    password = os.environ.get(ENVVAR_NAME_PASSWORD) or subprocess.check_output(
        ['envchain', ENVCHAIN_GROUP, 'sh', '-c',
         f'printf %s ${ENVVAR_NAME_PASSWORD}']).decode()
    if not username or not password:
        exit_with_message(f'${ENVVAR_NAME_USERNAME} or '
                          f'${ENVVAR_NAME_PASSWORD} not set.')
    return username, password


def http_get_printing(url, expected_statuses):
    print(f'GET {url} ... ', end='', flush=True)
    response = requests.get(url, headers={'User-Agent': USER_AGENT},
                            allow_redirects=False)
    print(response.status_code, flush=True)
    assert_status(response.status_code, expected_statuses)
    return response


def http_post_urlencoded_printing(url, data, expected_statuses):
    print(f'POST {url} ... ', end='', flush=True)
    data = urllib.parse.urlencode(data)
    response = requests.post(
        url, data,
        headers={'User-Agent': USER_AGENT,
                 'Content-Type': 'application/x-www-form-urlencoded'},
        allow_redirects=False)
    print(response.status_code, flush=True)
    assert_status(response.status_code, expected_statuses)
    return response


def assert_status(status, expected_statuses):
    if status not in expected_statuses:
        exit_with_message(f'Expected {expected_statuses}, got {status}')


def extract_post_key(page):
    try:
        import lxml as _
        soup = BeautifulSoup(page, 'lxml')
    except ImportError:
        warnings.warn('lxml not installed')
        soup = BeautifulSoup(page)
    try:
        return soup.find('input', {'name': 'postKey', 'type': 'hidden'})[
            'value']
    except (AttributeError, KeyError):
        exit_with_message('Failed to scape.')


def exit_with_message(message):
    print(message, file=sys.stderr)
    sys.exit(1)


if __name__ == '__main__':
    main()
